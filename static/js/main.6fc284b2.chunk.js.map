{"version":3,"sources":["components/HeaderNav.js","components/HomePage.js","utils/utils.js","components/BreedCard.js","components/BreedsPage.js","components/ImageCard.js","components/BreedImagesPage.js","App.js","serviceWorker.js","index.js"],"names":["HeaderNav","props","hideNavbar","className","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","HomePage","hideHeaderNavbar","useEffect","Jumbotron","Button","getDogBreeds","a","axios","get","console","log","getRandomImageByBreed","breed","getBreedImages","BreedsCard","enforceRandomImage","useState","image","setImage","history","useHistory","loadRandomImage","result","data","message","onClick","push","Card","Body","Title","Image","src","thumbnail","BreedsPage","breeds","setBreeds","setEnforceRandomImage","searchValue","setSearchValue","loadData","keys","Object","displayBreeds","filter","toLowerCase","includes","trim","map","i","Col","key","lg","md","sm","Container","Row","htmlFor","type","value","onChange","e","target","randomNumber","Math","floor","random","ImageCard","imageUrl","show","setShow","Modal","size","onHide","Header","closeButton","fluid","BreedImagesPage","breedName","useParams","imageUrlList","setImageUrlList","imageToDraw","App","setHideNavbar","hide","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.6fc284b2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport './HeaderNav.css';\r\n\r\nconst HeaderNav = props => {\r\n    const { hideNavbar } = props;\r\n\r\n    return (\r\n        <div className=\"header-nav\">\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"light\" variant=\"light\" className={hideNavbar ? \"hide-navbar\" : \"\"}>\r\n                <Navbar.Brand className=\"nav-brand\" href=\"#/\">Dog Book</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#/breeds\">Breeds</Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeaderNav;","import React, { useEffect } from 'react';\r\nimport './HomePage.css';\r\nimport { Jumbotron, Button } from 'react-bootstrap';\r\n\r\nconst HomePage = props => {\r\n    const { hideHeaderNavbar } = props;\r\n \r\n    useEffect(() => {\r\n        hideHeaderNavbar(true);\r\n    }, [hideHeaderNavbar]);\r\n\r\n    return (\r\n        <div className=\"homepage\">\r\n            \r\n            <Jumbotron>\r\n                <h1>Dog Book</h1>\r\n                <p className=\"j-description\">\r\n                    Men's Best Friend\r\n                </p>\r\n                <p>\r\n                    <Button variant=\"outline-secondary\" href=\"#/breeds\">Woof!</Button>\r\n                </p>\r\n            </Jumbotron>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePage;","import axios from 'axios';\r\n\r\nexport const getDogBreeds = async () => {\r\n    try {\r\n        return await axios.get('https://dog.ceo/api/breeds/list/all');\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport const getRandomImageByBreed = async breed => {\r\n    try {\r\n        return await axios.get(`https://dog.ceo/api/breed/${breed}/images/random`);\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}\r\n\r\nexport const getBreedImages = async breed => {\r\n    try {\r\n        return await axios.get(`https://dog.ceo/api/breed/${breed}/images`);\r\n    } catch (e) {\r\n        console.log(e);\r\n        return {};\r\n    }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport './BreedCard.css';\r\nimport { Card, Image } from 'react-bootstrap';\r\nimport { getRandomImageByBreed } from '../utils/utils';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n// Component for drawing card with breed name and random image\r\n// Props:\r\n// breed - string - the breed name to display\r\n// enforceRandomImage = number - random number to trigger render in order to load new image\r\n// State:\r\n// image - string - the url for the image\r\nconst BreedsCard = props => {\r\n    const { breed, enforceRandomImage } = props;\r\n    const [image, setImage] = useState(\"https://previews.123rf.com/images/damedeeso/damedeeso1210/damedeeso121000006/15551999-placeholder-banner-dog.jpg\");\r\n    const history = useHistory();\r\n    \r\n    useEffect(() => {\r\n        loadRandomImage(breed);        \r\n    }, [breed, enforceRandomImage]);\r\n       \r\n    const loadRandomImage = async breed => {\r\n        try {\r\n            const result = await getRandomImageByBreed(breed);\r\n            setImage(result.data.message);\r\n        } catch (e) {\r\n            console.log(e)\r\n            return \"\";\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"dog-card\" onClick={() => history.push(`/breeds/${breed}`)}>\r\n            <Card>\r\n            <Card.Body>\r\n                <Card.Title>{breed}</Card.Title>                   \r\n                <Image src={image} thumbnail={true} className=\"dog-image\" />\r\n            </Card.Body>  \r\n            </Card>                        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BreedsCard;","import React, { useEffect, useState } from 'react';\r\nimport './BreedsPage.css';\r\nimport { getDogBreeds } from '../utils/utils';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport BreedCard from './BreedCard';\r\n\r\nconst BreedsPage = props => {\r\n    const { hideHeaderNavbar } = props;\r\n    const [breeds, setBreeds] = useState([]);\r\n    const [enforceRandomImage, setEnforceRandomImage] = useState(0);\r\n    const [searchValue, setSearchValue] = useState(\"\");\r\n \r\n    useEffect(() => {\r\n        hideHeaderNavbar(false);\r\n    }, [hideHeaderNavbar]);\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, []);\r\n\r\n    const loadData = async () => {        \r\n        try {\r\n            const result = await getDogBreeds();\r\n            const keys = Object.keys(result.data.message);\r\n            setBreeds(keys);            \r\n        } catch (e) {\r\n            console.log(e)\r\n        }                \r\n    };\r\n\r\n    const generateRandomNumber = () => {\r\n        let randomNumber = Math.floor(Math.random() * 1101);\r\n        while(randomNumber === enforceRandomImage) {\r\n            randomNumber = Math.floor(Math.random() * 1101);\r\n        }\r\n\r\n        setEnforceRandomImage(randomNumber);\r\n    }\r\n    \r\n    const filter = breeds.filter(breed => breed.toLowerCase().includes(searchValue.toLowerCase().trim()));\r\n    const displayBreeds = filter.map((breed, i) => <Col key={i} lg={3} md={4} sm={6} className=\"breed-col\"><BreedCard breed={breed} enforceRandomImage={enforceRandomImage}/></Col>);\r\n\r\n    return (\r\n        <div className=\"breeds-page\"> \r\n            <Container>\r\n                <Row className=\"search-row justify-content-between w-100\">\r\n                    <Col className=\"search-col\" lg={4} sm={6}>                                   \r\n                            <label htmlFor=\"search\">Search</label>    \r\n                            <input id=\"search\" type=\"text\" value={searchValue} onChange={e => setSearchValue(e.target.value)}/>\r\n                    </Col>\r\n                    <Col className=\"update-col\" lg={2} sm={6}>                        \r\n                        <button type=\"button\" onClick={generateRandomNumber}>Update Images</button>\r\n                    </Col>             \r\n                </Row>\r\n                <Row>\r\n                    {displayBreeds}\r\n                </Row>\r\n            </Container>                        \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BreedsPage;\r\n","import React, { useState } from 'react';\r\nimport './ImageCard.css';\r\nimport { Card, Image, Modal } from 'react-bootstrap';\r\n\r\n// Component for drawing card with image\r\n// Props:\r\n// imageUrl - string - the url for the image \r\n// State:\r\n// show - boolean - showing the modal dialog\r\nconst ImageCard = props => {\r\n    const { imageUrl } = props;\r\n    const [show, setShow] = useState(false);\r\n    \r\n    return (\r\n        <div className=\"image-card\" onClick={() => setShow(!show)}>\r\n            <Card>\r\n                <Card.Body>\r\n                    <Image src={imageUrl} thumbnail={true} className=\"dog-image-card\" />\r\n                </Card.Body>  \r\n            </Card>\r\n\r\n            <Modal size=\"lg\" show={show} onHide={() => setShow(false)}>\r\n                <Modal.Header closeButton/>                                \r\n                <Modal.Body>\r\n                    <Image src={imageUrl} className=\"large-dog-image\" fluid={true}/>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageCard;","import React, { useEffect, useState } from 'react';\r\nimport './BreedImagesPage.css';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getBreedImages } from '../utils/utils'\r\nimport { Container, Col, Row } from 'react-bootstrap';\r\nimport ImageCard from './ImageCard';\r\n\r\nconst BreedImagesPage = props => {\r\n    const { breedName } = useParams();\r\n    const [imageUrlList, setImageUrlList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n    }, [breedName]);\r\n\r\n    const loadData = async () => {        \r\n        try {\r\n            const result = await getBreedImages(breedName);\r\n            setImageUrlList(result.data.message);            \r\n        } catch (e) {\r\n            console.log(e)\r\n        }                \r\n    };\r\n\r\n    const imageToDraw = imageUrlList.map((image, i) => <Col key={i} lg={3} md={4} sm={6} className=\"image-col\"><ImageCard imageUrl={image}/></Col>)\r\n\r\n    return (\r\n        <div className='breed-img-page'>\r\n            <Container>\r\n                <Row>\r\n                    {imageToDraw}\r\n                </Row>                \r\n            </Container>            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BreedImagesPage;","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport HeaderNav from './components/HeaderNav';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport HomePage from './components/HomePage';\nimport BreedsPage from './components/BreedsPage';\nimport BreedImagesPage from './components/BreedImagesPage';\n\nfunction App() {\n  const [hideNavbar, setHideNavbar] = useState(false);\n\n  const hideHeaderNavbar = (hide = false) => {\n    setHideNavbar(hide);\n  }\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <HeaderNav hideNavbar={hideNavbar}/>\n        <Switch>\n          <Route exact path=\"/\">\n            <HomePage hideHeaderNavbar={hideHeaderNavbar}/>\n          </Route>\n          <Route exact path=\"/breeds\">\n            <BreedsPage hideHeaderNavbar={hideHeaderNavbar}/>\n          </Route>\n          <Route exact path=\"/breeds/:breedName\">\n            <BreedImagesPage/>\n          </Route>\n        </Switch>\n      </HashRouter>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}